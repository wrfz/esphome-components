name: ESPHome UART Test

on:
  push:
    branches:
      - wokwi
  pull_request:

jobs:
  test-esp:
    runs-on: ubuntu-latest

    steps:
    - name: Check for required secrets
      run: |
        if [ -z "${{ secrets.API_ENCRYPTION_KEY }}" ]; then
          echo "Error: API_ENCRYPTION_KEY secret is not set" >&2
          exit 1
        fi
        if [ -z "${{ secrets.OTA_PASSWORD }}" ]; then
          echo "Error: OTA_PASSWORD secret is not set" >&2
          exit 1
        fi
        if [ -z "${{ secrets.WIFI_SSID }}" ]; then
          echo "Error: WIFI_SSID secret is not set" >&2
          exit 1
        fi
        if [ -z "${{ secrets.WIFI_PASSWORD }}" ]; then
          echo "Error: WIFI_PASSWORD secret is not set" >&2
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set environment variables 
      run: | 
        echo "API_ENCRYPTION_KEY=${{ secrets.API_ENCRYPTION_KEY }}" >> $GITHUB_ENV
        echo "OTA_PASSWORD=${{ secrets.OTA_PASSWORD }}" >> $GITHUB_ENV
        echo "WIFI_SSID=${{ secrets.WIFI_SSID }}" >> $GITHUB_ENV
        echo "WIFI_PASSWORD=${{ secrets.WIFI_PASSWORD }}" >> $GITHUB_ENV

    - name: Install ESPHome
      run: |
        python3 -m pip install esphome

    - name: Prepare full.yaml
      run: |
        ls -al
        cp examples/full_de.yaml ./full.yaml
        sed -i 's/#outdoor_unit: RRLQ006CAV3/outdoor_unit: RRLQ006CAV3/' full.yaml

        cat full.yaml

        cp .github/workflows/resources/secrets.yaml .

        #cp .github/workflows/src/extract_external_components_block.py .
        #cp .github/workflows/src/patch_full_yaml.sh .

        #if [ "${{ github.ref }}" == "refs/heads/dev" ]; then 
        #  echo "dev branch run, take external components from dev branch"            
        #  source patch_full_yaml.sh
        #else 
        #  echo "not dev branch run, take external components from main" 
        #fi

        # print path used for external components
        #echo "The following external components will be used for compilation: "
        #python extract_external_components_block.py

    - name: Compile ESPHome binary
      run: |
        # compile eshphome
        esphome compile full.yaml

        # rename file
        #mv .esphome/build/rotex/.pioenvs/rotex/firmware.factory.bin .esphome/build/rotex/.pioenvs/rotex/rotex.factory-gpios-tx05-rx06.bin  

    - name: Install wokwi-cli
      run: |
        wget -q -O /usr/local/bin/wokwi-cli https://github.com/wokwi/wokwi-cli/releases/latest/download/wokwi-cli-linuxstatic-x64
        chmod +x /usr/local/bin/wokwi-cli
      shell: bash
    - name: Verify environment variables
      env:
        FORCE_COLOR: 2  # Enables color output - see https://github.com/chalk/supports-color/issues/106
        WOKWI_CLI_TOKEN: ${{ secrets.WOKWI_CLI_TOKEN }}
        CI_EXPECT_TEXT: ${{ secrets.CI_EXPECT_TEXT }}
        CI_FAIL_TEXT: ${{ secrets.CI_FAIL_TEXT }}
      run: |
        echo "WOKWI_CLI_TOKEN: $WOKWI_CLI_TOKEN"
        echo "CI_EXPECT_TEXT: $CI_EXPECT_TEXT"
        echo "CI_FAIL_TEXT: $CI_FAIL_TEXT"
    - name: List directory contents
      run: ls -al
      shell: bash
    - name: Run CLI
      env:
        FORCE_COLOR: 2  # Enables color output - see https://github.com/chalk/supports-color/issues/106
        WOKWI_CLI_TOKEN: ${{ secrets.WOKWI_CLI_TOKEN }}
        CI_EXPECT_TEXT: ${{ secrets.CI_EXPECT_TEXT }}
        CI_FAIL_TEXT: ${{ secrets.CI_FAIL_TEXT }}
      run: |
        wokwi-cli --elf .esphome/build/hpsu-uart/.pioenvs/hpsu-uart/firmware.elf --fail-text "Simulation failed" --timeout 60
      shell: bash
